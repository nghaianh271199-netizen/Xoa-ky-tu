import streamlit as st
from docx import Document
from docx.oxml.ns import qn
import re
import io
import unicodedata

st.set_page_config(page_title="DOCX Cleaner", layout="centered")

# --- H√†m s·ª≠a spacing b·ªã OCR t√°ch r·ªùi ---
def fix_broken_spacing(text: str) -> str:
    if not text:
        return text
    words = text.split()
    fixed_words = [w.replace(" ", "") for w in words]
    return " ".join(fixed_words)

# --- H√†m chu·∫©n h√≥a vƒÉn b·∫£n ---
def normalize_text(s, was_bold=False):
    if not s:
        return s

    s = s.replace('‚Äú', '').replace('‚Äù', '').replace('"', '')
    s = s.replace('-', '.').replace('‚Äì', '.').replace('‚Äî', '.')
    s = re.sub(r"\.{2,}", ".", s)

    allowed_punct = set(['.', ',', ';', ':', '?', '!', '(', ')'])
    out_chars = []
    for ch in s:
        cat = unicodedata.category(ch)
        if cat[0] in ('L', 'N', 'Z'):  # Letter, Number, Space
            out_chars.append(ch)
        elif ch in allowed_punct:
            out_chars.append(ch)
    result = ''.join(out_chars)

    result = re.sub(r'([a-z√†-·ªπ])([A-Z√Ä-·ª∏])', r'\1 \2', result)
    result = re.sub(r'([a-zA-Z√Ä-·ªπ])(\d)', r'\1 \2', result)
    result = re.sub(r'(\d)([a-zA-Z√Ä-·ªπ])', r'\1 \2', result)

    result = fix_broken_spacing(result)

    if was_bold:
        result = result.lower()

    return result

# --- L·∫•y to√†n b·ªô text t·ª´ DOCX ---
def extract_text_from_docx(file_stream):
    doc = Document(file_stream)
    all_text = []

    def process_paragraph(para):
        texts = []
        for run in para.runs:
            was_bold = bool(run.bold)
            texts.append(normalize_text(run.text, was_bold))
        return " ".join(texts)

    for para in doc.paragraphs:
        all_text.append(process_paragraph(para))
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for para in cell.paragraphs:
                    all_text.append(process_paragraph(para))
    for section in doc.sections:
        for para in section.header.paragraphs:
            all_text.append(process_paragraph(para))
        for para in section.footer.paragraphs:
            all_text.append(process_paragraph(para))

    return "\n".join([p.strip() for p in all_text if p.strip()])

# --- Copy button custom ---
def copy_button(text, label="üìã Copy to√†n b·ªô"):
    js = f"""
    <script>
    function copyText() {{
        const text = `{text}`;
        navigator.clipboard.writeText(text);
        alert("ƒê√£ copy v√†o clipboard!");
    }}
    </script>
    <button onclick="copyText()">{label}</button>
    """
    st.markdown(js, unsafe_allow_html=True)

# ---------------- STREAMLIT UI ---------------- #

st.title("üìÑ DOCX Cleaner (B·∫£n Copy)")
st.write("·ª®ng d·ª•ng chu·∫©n h√≥a vƒÉn b·∫£n t·ª´ `.docx` ho·∫∑c nh·∫≠p tr·ª±c ti·∫øp: "
         "lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát, thay d·∫•u `-` b·∫±ng `.`, gom nhi·ªÅu d·∫•u `.`, "
         "chuy·ªÉn font Times New Roman, b·ªè ch·ªØ in ƒë·∫≠m (ƒë·ªïi th√†nh ch·ªØ th∆∞·ªùng), "
         "t√°ch ch·ªØ d√≠nh, v√† s·ª≠a l·ªói ch·ªØ b·ªã OCR t√°ch r·ªùi. "
         "K·∫øt qu·∫£ cu·ªëi hi·ªÉn th·ªã tr·ª±c ti·∫øp ƒë·ªÉ copy.")

tab1, tab2 = st.tabs(["üìÇ Upload DOCX", "‚úçÔ∏è Nh·∫≠p vƒÉn b·∫£n"])

with tab1:
    uploaded_file = st.file_uploader("Ch·ªçn file .docx", type=["docx"])
    if uploaded_file is not None:
        if st.button("X·ª≠ l√Ω file DOCX"):
            result_text = extract_text_from_docx(uploaded_file)
            st.success("‚úÖ X·ª≠ l√Ω xong! VƒÉn b·∫£n k·∫øt qu·∫£:")
            st.text_area("K·∫øt qu·∫£:", value=result_text, height=400)
            copy_button(result_text)

with tab2:
    input_text = st.text_area("Nh·∫≠p ho·∫∑c d√°n vƒÉn b·∫£n t·∫°i ƒë√¢y:", height=200)
    if st.button("X·ª≠ l√Ω vƒÉn b·∫£n"):
        if input_text.strip():
            result_text = normalize_text(input_text)
            st.success("‚úÖ X·ª≠ l√Ω xong! VƒÉn b·∫£n k·∫øt qu·∫£:")
            st.text_area("K·∫øt qu·∫£:", value=result_text, height=400)
            copy_button(result_text)
        else:
            st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p vƒÉn b·∫£n tr∆∞·ªõc khi x·ª≠ l√Ω.")
